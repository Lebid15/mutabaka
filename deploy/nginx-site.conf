server {
  listen 80 default_server;
  server_name _;

  # Resolve Docker internal DNS dynamically so service IP changes don't break proxying
  resolver 127.0.0.11 ipv6=off valid=30s;
  # Define variables to force runtime DNS resolution for proxy_pass
  set $backend http://backend:8000;
  set $frontend http://frontend:3000;
  # Preserve outer proxy's X-Forwarded-Proto when present (SSL termination), else use current scheme
  set $proxy_x_forwarded_proto $scheme;
  if ($http_x_forwarded_proto != "") {
    set $proxy_x_forwarded_proto $http_x_forwarded_proto;
  }

  # Static/media
  location /static/ {
    alias /srv/static/;
    access_log off;
    expires 7d;
  }
  location /media/ {
    alias /srv/media/;
    access_log off;
    expires 7d;
  }

  # Backend (Django via Daphne)
  location /api/ {
    proxy_pass $backend;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
    proxy_redirect off;
  }

  # WebSocket for Channels
  location /ws/ {
    proxy_pass $backend;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
    # Improve websocket stability
    proxy_read_timeout 600s;
    proxy_send_timeout 600s;
    proxy_buffering off;
    proxy_redirect off;
  }

  # Django Admin directly to backend
  # Redirect /admin (no slash) to /admin/
  location = /admin {
    return 301 /admin/;
  }
  location /admin/ {
    proxy_pass $backend;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
    proxy_redirect off;
  }

  # Health check
  location = /health {
    proxy_pass $backend;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
    proxy_redirect off;
    access_log off;
  }

  # Frontend (Next.js)
  location / {
    proxy_pass $frontend;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
    proxy_redirect off;
  }
}
