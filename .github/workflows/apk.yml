name: Build Android APK & AAB

on:
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest
    env:
      EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
    defaults:
      run:
        working-directory: mobile

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install project dependencies
        run: npm ci

      - name: Install EAS CLI
        run: npm install -g eas-cli

      - name: Verify Expo authentication
        run: eas whoami
      
      - name: Setup Android credentials on EAS (one-time)
        run: |
          echo "⚠️  IMPORTANT: This step requires Android credentials to be configured on EAS."
          echo "If this is your first build, run locally once:"
          echo "  cd mobile && eas build --platform android --profile production"
          echo "This will generate and upload credentials to EAS servers."
          echo ""
          echo "Checking if credentials exist..."
          eas credentials || echo "Run: eas credentials to manage Android keystore"

      - name: Show version info
        run: |
          echo "📱 Current app.json version:"
          node -e "console.log('Version:', require('./app.json').expo.version)"
          echo "ℹ️  versionCode will auto-increment via EAS production profile"

      - name: Build Android AAB for Production
        id: build-aab
        run: |
          echo "🏗️ Building AAB bundle for Google Play..."
          BUILD_OUTPUT=$(eas build --platform android --profile production --non-interactive --wait --json 2>&1 || true)
          echo "$BUILD_OUTPUT" | tee build-aab-output.txt
          
          # Extract build ID and URL
          BUILD_ID=$(echo "$BUILD_OUTPUT" | grep -oP '"id"\s*:\s*"\K[^"]+' | head -1 || echo "")
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          
      - name: Build Android APK for Testing
        id: build-apk
        run: |
          echo "🏗️ Building APK for testing/distribution..."
          BUILD_OUTPUT=$(eas build --platform android --profile preview --non-interactive --wait --json 2>&1 || true)
          echo "$BUILD_OUTPUT" | tee build-apk-output.txt
          
          # Extract build ID and URL
          BUILD_ID=$(echo "$BUILD_OUTPUT" | grep -oP '"id"\s*:\s*"\K[^"]+' | head -1 || echo "")
          echo "APK_BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          
      - name: Download builds from EAS
        run: |
          echo "📥 Downloading builds from EAS..."
          mkdir -p downloads
          
          # Download AAB
          if [ ! -z "$BUILD_ID" ]; then
            echo "Downloading AAB (build: $BUILD_ID)..."
            eas build:view $BUILD_ID --json > aab-info.json || true
            AAB_URL=$(cat aab-info.json | grep -oP '"artifacts"\s*:\s*\{\s*"buildUrl"\s*:\s*"\K[^"]+' || echo "")
            if [ ! -z "$AAB_URL" ]; then
              curl -L -o downloads/mutabaka-release.aab "$AAB_URL"
              echo "✅ AAB downloaded successfully"
            fi
          fi
          
          # Download APK
          if [ ! -z "$APK_BUILD_ID" ]; then
            echo "Downloading APK (build: $APK_BUILD_ID)..."
            eas build:view $APK_BUILD_ID --json > apk-info.json || true
            APK_URL=$(cat apk-info.json | grep -oP '"artifacts"\s*:\s*\{\s*"buildUrl"\s*:\s*"\K[^"]+' || echo "")
            if [ ! -z "$APK_URL" ]; then
              curl -L -o downloads/mutabaka-release.apk "$APK_URL"
              echo "✅ APK downloaded successfully"
            fi
          fi
          
          # List downloaded files
          ls -lh downloads/
          
      - name: Upload AAB artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mutabaka-aab
          path: downloads/mutabaka-release.aab
          if-no-files-found: warn
          
      - name: Upload APK artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mutabaka-apk
          path: downloads/mutabaka-release.apk
          if-no-files-found: warn
          
      - name: Print download links to summary
        if: always()
        run: |
          echo "### 📦 Build Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Extract download URLs from build outputs
          if [ -f build-aab.json ]; then
            AAB_URL=$(cat build-aab.json | grep -o '"artifacts":{"buildUrl":"[^"]*"' | sed 's/.*"buildUrl":"\([^"]*\)".*/\1/' || echo "")
            if [ ! -z "$AAB_URL" ]; then
              echo "### 📥 AAB Download (Production)" >> $GITHUB_STEP_SUMMARY
              echo "� [Download AAB file]($AAB_URL)" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          if [ -f build-apk.json ]; then
            APK_URL=$(cat build-apk.json | grep -o '"artifacts":{"buildUrl":"[^"]*"' | sed 's/.*"buildUrl":"\([^"]*\)".*/\1/' || echo "")
            if [ ! -z "$APK_URL" ]; then
              echo "### 📥 APK Download (Preview)" >> $GITHUB_STEP_SUMMARY
              echo "🔗 [Download APK file]($APK_URL)" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "### 🌐 EAS Dashboard" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [View all builds on EAS](https://expo.dev/accounts/mutabaka/projects/mutabaka/builds)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📱 Build Info" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 **AAB file** - For Google Play Store upload" >> $GITHUB_STEP_SUMMARY
          echo "- 📱 **APK file** - For direct installation and testing" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Build completed successfully!**" >> $GITHUB_STEP_SUMMARY


