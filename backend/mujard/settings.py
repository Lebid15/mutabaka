"""
Django settings for mujard project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
from urllib.parse import urlparse
from django.core.exceptions import ImproperlyConfigured

# Load .env for local development (safe no-op in production if file missing)
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

def _to_bool(v: str | None, default: bool = False) -> bool:
    if v is None:
        return default
    return v.strip().lower() in {"1", "true", "yes", "on"}

# SECURITY: Keep secret in environment for production
SECRET_KEY = os.getenv("SECRET_KEY") or "dev-insecure-key"

# DEBUG from env (DJANGO_DEBUG preferred)
DEBUG = _to_bool(os.getenv("DJANGO_DEBUG"), default=True)

def _env_list(name: str, sep: str = ","):
    v = os.getenv(name)
    if not v:
        return None
    return [x.strip() for x in v.split(sep) if x.strip()]

_DEFAULT_HOSTS = ["127.0.0.1", "localhost", "testserver", "10.0.2.2"]

# Prefer DJANGO_ALLOWED_HOSTS, fallback to legacy ALLOWED_HOSTS
_env_allowed = _env_list("DJANGO_ALLOWED_HOSTS") or _env_list("ALLOWED_HOSTS")
# Default to local + our domains and server IP if not provided. In DEBUG, always allow 10.0.2.2 for Android emulator.
ALLOWED_HOSTS = _env_allowed or (
    _DEFAULT_HOSTS + ["mutabaka.com", "www.mutabaka.com", "91.98.95.210"]
)
# In development, allow all hosts to simplify emulator/device testing (10.0.2.2, LAN IPs, etc.).
if DEBUG and not os.getenv("STRICT_DEBUG_HOSTS"):
    ALLOWED_HOSTS = ["*"]

# In production, refuse to start without a proper SECRET_KEY
if not DEBUG and (not SECRET_KEY or SECRET_KEY == "dev-insecure-key"):
    raise ImproperlyConfigured("SECRET_KEY must be set via environment in production")


# Application definition

INSTALLED_APPS = [
    'jazzmin',  # Admin theme
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'daphne',
    'django.contrib.staticfiles',
    'ckeditor',
    'channels',
    'rest_framework',
    'accounts',
    'finance',
    'communications',
    'subscriptions',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mujard.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mujard.wsgi.application'
ASGI_APPLICATION = 'mujard.asgi.application'

REDIS_URL = os.environ.get('REDIS_URL')
if REDIS_URL:
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels_redis.core.RedisChannelLayer',
            'CONFIG': { 'hosts': [REDIS_URL] }
        }
    }
else:
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels.layers.InMemoryChannelLayer'
        }
    }


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASE_URL = os.getenv('DATABASE_URL')
if DATABASE_URL:
    # Expected format: postgres://USER:PASS@HOST:PORT/DBNAME
    url = urlparse(DATABASE_URL)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': url.path.lstrip('/'),
            'USER': url.username,
            'PASSWORD': url.password,
            'HOST': url.hostname,
            'PORT': url.port or 5432,
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# Serve static files under /static/ and collect them into BASE_DIR/static (mounted in production)
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'static'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = 'accounts.CustomUser'

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Device management defaults
USER_DEVICE_MAX_ACTIVE = int(os.getenv('USER_DEVICE_MAX_ACTIVE', '10'))  # زيادة مؤقتة للتطوير
USER_DEVICE_PENDING_TTL_MINUTES = int(os.getenv('USER_DEVICE_PENDING_TTL_MINUTES', '15'))
WEB_LOGIN_QR_TTL_SECONDS = int(os.getenv('WEB_LOGIN_QR_TTL_SECONDS', '90'))

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # نضع JWT أولاً لضمان التقاط Authorization قبل جلسة فارغة
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
        'accounts.permissions.ActiveDeviceRequired',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 50,
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
    ],
        'DEFAULT_THROTTLE_RATES': {
            'anon': '100/hour',
            'user': '1000/hour',
            'auth_token': '20/minute',
            'transaction': '60/minute',
            'pin_generate': '3/minute',
            'pin_verify': '20/minute',
            'devices_register': '10/minute',
            'devices_approve': '10/minute',
            'login_qr': '100/minute',
            'login_qr_status': '500/minute',
            'login_qr_approve': '30/minute',
        },
}

# Simple JWT (basic defaults, can tweak lifetimes later)
from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'AUTH_HEADER_TYPES': ('Bearer',),
}

# Web Push (VAPID) configuration – values should be set in environment or .env for local dev
# Accept VAPID_CONTACT_EMAIL or VAPID_SUBJECT (common naming) for the subject claim
VAPID_PUBLIC_KEY = os.environ.get('VAPID_PUBLIC_KEY')
VAPID_PRIVATE_KEY = os.environ.get('VAPID_PRIVATE_KEY')
VAPID_CONTACT_EMAIL = (
    os.environ.get('VAPID_CONTACT_EMAIL')
    or os.environ.get('VAPID_SUBJECT')
    or 'mailto:admin@example.com'
)

# Jazzmin basic customization (adjust freely later)
JAZZMIN_SETTINGS = {
    "site_title": "Mutabaka Admin",
    "site_header": "Mutabaka",
    "site_brand": "Mutabaka",
    "welcome_sign": "مرحباً بك في لوحة التحكم",
    "show_ui_builder": False,
    # Use Jazzmin's default styles for tabs; no custom CSS overrides
    # "custom_css": "admin/tabs-fix.css",
    # Ensure change forms render as tabbed UI (prevents stacked duplicate sections)
    "changeform_format": "horizontal_tabs",
    "changeform_format_overrides": {},
}

JAZZMIN_UI_TWEAKS = {
    "theme": "darkly",
    "dark_mode_theme": "darkly",
}

# CORS (allow local frontend ports)
_DEFAULT_CORS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:3001",
    "http://127.0.0.1:3001",
    "http://localhost:3002",
    "http://127.0.0.1:3002",
]
# Allow adding production origins via env (DJANGO_CORS_ALLOWED_ORIGINS)
_env_cors = _env_list("DJANGO_CORS_ALLOWED_ORIGINS") or _env_list("CORS_ALLOWED_ORIGINS") or []
CORS_ALLOWED_ORIGINS = _DEFAULT_CORS + _env_cors

# CSRF trusted origins from env (DJANGO_* preferred)
CSRF_TRUSTED_ORIGINS = (
    _env_list("DJANGO_CSRF_TRUSTED_ORIGINS")
    or _env_list("CSRF_TRUSTED_ORIGINS")
    or [
        "https://mutabaka.com",
        "https://www.mutabaka.com",
    ]
)
CORS_ALLOW_CREDENTIALS = True

# Cookies security (secure in production, SameSite Lax minimum)
SESSION_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_SAMESITE = "Lax"
CSRF_COOKIE_SAMESITE = "Lax"
# Optional: enable for subdomains via env (e.g., .mutabaka.com)
_csrf_cookie_domain = os.getenv("CSRF_COOKIE_DOMAIN") or os.getenv("DJANGO_CSRF_COOKIE_DOMAIN")
if _csrf_cookie_domain:
    CSRF_COOKIE_DOMAIN = _csrf_cookie_domain

# Behind Nginx/Proxy/SSL termination - trust X-Forwarded-Proto for HTTPS detection
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# Logging configuration to surface ACK/READ websocket events from communications.consumers
LOG_LEVEL = os.getenv("DJANGO_LOG_LEVEL", "INFO").upper()
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "chat_verbose": {
            "format": "%(asctime)s %(levelname)s %(name)s %(message)s"
        },
        # Simple structured-ish formatter (extra keys will append at end automatically)
        "chat_struct": {
            "format": "%(asctime)s|%(levelname)s|%(name)s|msg=%(message)s"
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "chat_verbose",
        }
    },
    "loggers": {
        # Our app (covers communications.consumers via propagation)
        "communications": {
            "handlers": ["console"],
            "level": LOG_LEVEL,
            "propagate": True,
        },
        # Ensure Django errors still appear
        "django": {
            "handlers": ["console"],
            "level": "WARNING",
            "propagate": True,
        },
    },
    "root": {  # catch-all
        "handlers": ["console"],
        "level": LOG_LEVEL,
    },
}

# CKEditor toolbar tuned for Arabic legal content authoring
CKEDITOR_CONFIGS = {
    "default": {
        "language": "ar",
        "toolbar": "Custom",
        "toolbar_Custom": [
            [
                "Format",
                "Font",
                "FontSize",
                "-",
                "Bold",
                "Italic",
                "Underline",
                "Strike",
                "Subscript",
                "Superscript",
            ],
            [
                "TextColor",
                "BGColor",
                "-",
                "JustifyLeft",
                "JustifyCenter",
                "JustifyRight",
                "JustifyBlock",
            ],
            [
                "NumberedList",
                "BulletedList",
                "-",
                "Outdent",
                "Indent",
                "Blockquote",
            ],
            ["Link", "Unlink", "Anchor"],
            ["Table", "HorizontalRule", "SpecialChar"],
            ["RemoveFormat", "Source"],
        ],
        "extraPlugins": ",".join([
            "font",
            "colorbutton",
            "justify",
        ]),
        "height": 400,
        "tabSpaces": 4,
    }
}

# ============================================================================
# Expo Push Notifications Settings
# ============================================================================
# FCM Server Key is required for sending push notifications via Expo
# Get it from Firebase Console → Project Settings → Cloud Messaging
# Set via environment variable: EXPO_FCM_SERVER_KEY
EXPO_ACCESS_TOKEN = os.getenv("EXPO_FCM_SERVER_KEY")
EXPO_PUSH_URL = "https://exp.host/--/api/v2/push/send"
